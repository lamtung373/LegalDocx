// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique @db.VarChar(50)
  email         String   @unique @db.VarChar(100)
  passwordHash  String   @map("password_hash") @db.VarChar(255)
  fullName      String   @map("full_name") @db.VarChar(100)
  role          Role     @default(USER)
  phone         String?  @db.VarChar(20)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  createdTemplates   ContractTemplate[] @relation("CreatedBy")
  createdParties     Party[]            @relation("CreatedBy")
  createdAssets      Asset[]            @relation("CreatedBy")
  createdFiles       NotaryFile[]       @relation("CreatedBy")
  notarizedFiles     NotaryFile[]       @relation("NotarizedBy")
  auditLogs          AuditLog[]

  @@index([username])
  @@index([email])
  @@index([role])
  @@map("users")
}

model ContractTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(200)
  category    String   @db.VarChar(100)
  content     String   @db.LongText
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   Int?     @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator User?        @relation("CreatedBy", fields: [createdBy], references: [id])
  files   NotaryFile[]

  @@index([category])
  @@index([isActive])
  @@fulltext([name, description])
  @@map("contract_templates")
}

model Party {
  id          Int       @id @default(autoincrement())
  fullName    String    @map("full_name") @db.VarChar(100)
  idNumber    String    @unique @map("id_number") @db.VarChar(20)
  dateOfBirth DateTime? @map("date_of_birth") @db.Date
  gender      Gender    @default(Nam)
  phone       String?   @db.VarChar(20)
  email       String?   @db.VarChar(100)
  address     String?   @db.Text
  province    String?   @db.VarChar(50)
  district    String?   @db.VarChar(50)
  ward        String?   @db.VarChar(50)
  nationality String?   @default("Việt Nam") @db.VarChar(50)
  notes       String?   @db.Text
  createdBy   Int?      @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  creator    User?         @relation("CreatedBy", fields: [createdBy], references: [id])
  assets     Asset[]       @relation("Owner")
  fileParties FileParty[]

  @@index([idNumber])
  @@index([fullName])
  @@index([phone])
  @@fulltext([fullName, address])
  @@map("parties")
}

model Asset {
  id                Int       @id @default(autoincrement())
  type              String    @db.VarChar(100)
  name              String    @db.VarChar(200)
  description       String?   @db.Text
  location          String?   @db.Text
  province          String?   @db.VarChar(50)
  district          String?   @db.VarChar(50)
  ward              String?   @db.VarChar(50)
  area              Decimal?  @db.Decimal(15, 2)
  value             Decimal?  @db.Decimal(20, 2)
  certificateNumber String?   @map("certificate_number") @db.VarChar(100)
  issueDate         DateTime? @map("issue_date") @db.Date
  issuedBy          String?   @map("issued_by") @db.VarChar(200)
  ownerId           Int?      @map("owner_id")
  notes             String?   @db.Text
  createdBy         Int?      @map("created_by")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  owner      Party?       @relation("Owner", fields: [ownerId], references: [id])
  creator    User?        @relation("CreatedBy", fields: [createdBy], references: [id])
  fileAssets FileAsset[]

  @@index([type])
  @@index([ownerId])
  @@index([certificateNumber])
  @@fulltext([name, description, location])
  @@map("assets")
}

model NotaryFile {
  id              Int           @id @default(autoincrement())
  fileNumber      String        @unique @map("file_number") @db.VarChar(50)
  templateId      Int?          @map("template_id")
  title           String        @db.VarChar(300)
  contractContent String?       @map("contract_content") @db.LongText
  status          FileStatus    @default(CHO_CONG_CHUNG)
  notaryDate      DateTime?     @map("notary_date") @db.Date
  notaryFee       Decimal?      @map("notary_fee") @db.Decimal(15, 2)
  paymentStatus   PaymentStatus @default(CHUA_THANH_TOAN) @map("payment_status")
  notes           String?       @db.Text
  createdBy       Int?          @map("created_by")
  notarizedBy     Int?          @map("notarized_by")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  template    ContractTemplate? @relation(fields: [templateId], references: [id])
  creator     User?             @relation("CreatedBy", fields: [createdBy], references: [id])
  notary      User?             @relation("NotarizedBy", fields: [notarizedBy], references: [id])
  fileParties FileParty[]
  fileAssets  FileAsset[]

  @@index([fileNumber])
  @@index([status])
  @@index([notaryDate])
  @@index([createdBy])
  @@fulltext([title, contractContent])
  @@map("notary_files")
}

model FileParty {
  id       Int      @id @default(autoincrement())
  fileId   Int      @map("file_id")
  partyId  Int      @map("party_id")
  role     String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  file  NotaryFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  party Party      @relation(fields: [partyId], references: [id])

  @@unique([fileId, partyId, role], name: "unique_file_party_role")
  @@index([fileId])
  @@index([partyId])
  @@map("file_parties")
}

model FileAsset {
  id        Int      @id @default(autoincrement())
  fileId    Int      @map("file_id")
  assetId   Int      @map("asset_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  file  NotaryFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  asset Asset      @relation(fields: [assetId], references: [id])

  @@unique([fileId, assetId], name: "unique_file_asset")
  @@index([fileId])
  @@index([assetId])
  @@map("file_assets")
}

model AuditLog {
  id         Int        @id @default(autoincrement())
  tableName  String     @map("table_name") @db.VarChar(50)
  recordId   Int        @map("record_id")
  action     LogAction
  oldValues  Json?      @map("old_values")
  newValues  Json?      @map("new_values")
  userId     Int?       @map("user_id")
  createdAt  DateTime   @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

enum Role {
  admin
  user

  @@map("Role")
}

enum Gender {
  Nam
  Nu @map("Nữ")

  @@map("Gender")
}

enum FileStatus {
  DA_CONG_CHUNG @map("Đã công chứng")
  CHO_CONG_CHUNG @map("Chờ công chứng")
  HUY @map("Hủy")

  @@map("FileStatus")
}

enum PaymentStatus {
  DA_THANH_TOAN @map("Đã thanh toán")
  CHUA_THANH_TOAN @map("Chưa thanh toán")

  @@map("PaymentStatus")
}

enum LogAction {
  CREATE
  UPDATE
  DELETE

  @@map("LogAction")
}
