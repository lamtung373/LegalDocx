generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(100)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role         UserRole @default(user)
  fullName     String?  @map("full_name") @db.VarChar(255)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  createdTemplates ContractTemplate[]
  createdContracts Contract[]

  @@map("users")
}

enum UserRole {
  admin
  user
}

model ContractCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  templates ContractTemplate[]

  @@map("contract_categories")
}

model ContractTemplate {
  id              Int      @id @default(autoincrement())
  categoryId      Int?     @map("category_id")
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  templateContent String   @map("template_content") @db.LongText
  requiredFields  Json?    @map("required_fields")
  variableFields  Json?    @map("variable_fields")
  isActive        Boolean  @default(true) @map("is_active")
  createdBy       Int?     @map("created_by")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  category  ContractCategory? @relation(fields: [categoryId], references: [id])
  creator   User?             @relation(fields: [createdBy], references: [id])
  contracts Contract[]

  @@map("contract_templates")
}

model Party {
  id                     Int       @id @default(autoincrement())
  type                   PartyType
  fullName               String    @map("full_name") @db.VarChar(255)
  citizenId              String?   @map("citizen_id") @db.VarChar(50)
  taxCode                String?   @map("tax_code") @db.VarChar(50)
  phone                  String?   @db.VarChar(20)
  email                  String?   @db.VarChar(255)
  address                String?   @db.Text
  birthDate              DateTime? @map("birth_date") @db.Date
  birthPlace             String?   @map("birth_place") @db.VarChar(255)
  gender                 Gender?
  nationality            String?   @db.VarChar(100) @default("Viá»‡t Nam")
  occupation             String?   @db.VarChar(255)
  representativeName     String?   @map("representative_name") @db.VarChar(255)
  representativePosition String?   @map("representative_position") @db.VarChar(255)
  bankAccount            String?   @map("bank_account") @db.VarChar(50)
  bankName               String?   @map("bank_name") @db.VarChar(255)
  notes                  String?   @db.Text
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  ownedAssets     Asset[]
  contractParties ContractParty[]

  @@index([citizenId])
  @@index([taxCode])
  @@index([fullName])
  @@index([phone])
  @@map("parties")
}

enum PartyType {
  individual
  organization
}

enum Gender {
  male
  female
  other
}

model Asset {
  id                   Int         @id @default(autoincrement())
  type                 AssetType
  name                 String      @db.VarChar(255)
  description          String?     @db.Text
  location             String?     @db.VarChar(500)
  area                 Decimal?    @db.Decimal(12, 2)
  certificateNumber    String?     @map("certificate_number") @db.VarChar(255)
  certificateDate      DateTime?   @map("certificate_date") @db.Date
  certificateAuthority String?     @map("certificate_authority") @db.VarChar(255)
  marketValue          Decimal?    @map("market_value") @db.Decimal(15, 2)
  registrationNumber   String?     @map("registration_number") @db.VarChar(255)
  ownerId              Int?        @map("owner_id")
  additionalInfo       Json?       @map("additional_info")
  createdAt            DateTime    @default(now()) @map("created_at")
  updatedAt            DateTime    @updatedAt @map("updated_at")

  // Relations
  owner          Party?          @relation(fields: [ownerId], references: [id])
  contractAssets ContractAsset[]

  @@index([ownerId])
  @@index([type])
  @@index([certificateNumber])
  @@map("assets")
}

enum AssetType {
  real_estate
  vehicle
  machinery
  other
}

model Contract {
  id               Int       @id @default(autoincrement())
  templateId       Int?      @map("template_id")
  contractNumber   String?   @unique @map("contract_number") @db.VarChar(100)
  title            String?   @db.VarChar(500)
  content          String    @db.LongText
  status           ContractStatus @default(draft)
  notarizationDate DateTime? @map("notarization_date") @db.Date
  notaryFee        Decimal?  @map("notary_fee") @db.Decimal(12, 2)
  notes            String?   @db.Text
  createdBy        Int?      @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  template        ContractTemplate? @relation(fields: [templateId], references: [id])
  creator         User?             @relation(fields: [createdBy], references: [id])
  contractParties ContractParty[]
  contractAssets  ContractAsset[]
  attachments     Attachment[]

  @@index([templateId])
  @@index([status])
  @@index([createdBy])
  @@index([contractNumber])
  @@map("contracts")
}

enum ContractStatus {
  draft
  completed
  cancelled
}

model ContractParty {
  id              Int      @id @default(autoincrement())
  contractId      Int      @map("contract_id")
  partyId         Int      @map("party_id")
  role            String   @db.VarChar(50)
  roleDescription String?  @map("role_description") @db.VarChar(255)
  orderIndex      Int      @default(1) @map("order_index")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  party    Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([partyId])
  @@map("contract_parties")
}

model ContractAsset {
  id               Int      @id @default(autoincrement())
  contractId       Int      @map("contract_id")
  assetId          Int      @map("asset_id")
  transactionValue Decimal? @map("transaction_value") @db.Decimal(15, 2)
  assetRole        String?  @map("asset_role") @db.VarChar(100)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  asset    Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([assetId])
  @@map("contract_assets")
}

model Attachment {
  id         Int      @id @default(autoincrement())
  contractId Int      @map("contract_id")
  fileName   String   @map("file_name") @db.VarChar(255)
  filePath   String   @map("file_path") @db.VarChar(500)
  fileType   String?  @map("file_type") @db.VarChar(50)
  fileSize   Int?     @map("file_size")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@map("attachments")
}
